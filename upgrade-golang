#!/usr/bin/env bash

set -o pipefail
set -o errexit

PREFIX="${PREFIX:-$(dirname "$(go env GOROOT)")}"

if [[ "_$PREFIX" = "_/usr/lib" ]]; then
	echo "$0: /usr/lib/go is managed by your OS. Use a different GOROOT." >&2
	exit 1
fi

sudo=
[[ -w "$PREFIX" ]] || sudo=sudo

if [[ ! -h "$PREFIX"/go && -d "$PREFIX"/go ]]; then
	version="$("$PREFIX"/go/bin/go version 2>/dev/null | sed -n 's/^go version go\([^ ]*\) .*$/\1/p')"
	if [[ -n "$version" ]]; then
		#echo "$version"
		$sudo mv "$PREFIX"/go "$PREFIX"/go"$version"
		$sudo ln -s -r "$PREFIX"/go"$version" "$PREFIX"/go
	fi
fi

if [[ -z "$1" ]]; then
	echo "usage: $0 go-version [sha256]"
	exit 1
fi

url="$1"
if [[ "x$url" = "xhttp://"* ]]; then
	archive="$(basename "$url")"
	osarch="$(expr "$archive" '.*\.\([^.]*\)\.tar.gz')"
	version="$(expr "$archive" 'go\([0-9.]+\)\.[a-z0-9-]+\.tar.gz')"
else
	version="$1"
	osarch="$("$PREFIX"/go/bin/go env GOHOSTOS)-$("$PREFIX"/go/bin/go env GOARCH)"
	archive="go${version}.${osarch}.tar.gz"
	url="https://storage.googleapis.com/golang/${archive}"
fi
sha256="$2"
tmpdir="$(xdg-user-dir DOWNLOAD)"


if [[ -d "$PREFIX/go$version" ]]; then
	echo ""$PREFIX"/go$version already exists." >&2
	$sudo ln -f -s -r "$PREFIX/go$version" "$PREFIX/go"
else

	if [[ ! -e "$tmpdir/$archive" ]]; then
		echo "$url -> $tmpdir/$archive"
		wget -O "$tmpdir/$archive" "$url"
	fi

	if [[ -n "$sha256" ]]; then
		if [[ "$sha256" != "$(openssl sha256 -r "$tmpdir/$archive" | cut -d ' ' -f 1)" ]]; then
			echo "$tmpdir/$archive: incorrect sha256" >&2
			exit 1
		fi
	fi

	if [[ -h "$PREFIX"/go ]]; then
		$sudo rm "$PREFIX"/go
	fi

	$sudo tar -C "$PREFIX" -xzf "$tmpdir/$archive"
	$sudo mv "$PREFIX"/go "$PREFIX/go$version"
	$sudo ln -s -r "$PREFIX/go$version" "$PREFIX/go"
fi

echo Rebuilding $GOPATH/pkg...
for osarch in $(ls "$GOPATH/pkg")
do
	echo - $osarch
	#(cd "$GOPATH/pkg/$osarch"; find * -name '*.a' | sed 's/\.a$//') | GOOS=${osarch%_*} GOARCH=${goarch#*_} xargs go get
	for pkg in $(cd "$GOPATH/pkg/$osarch"; find * -name '*.a')
	do
		pkg="${pkg%.a}"
		if [[ -d "$GOPATH/src/$pkg" ]]; then
			echo "  $pkg..."
			GOOS=${osarch%_*} GOARCH=${goarch#*_} go get $pkg
		else
			echo "  $pkg: cleanup"
			rm "$GOPATH/pkg/$osarch/$pkg.a"
		fi
	done
done
echo Done.
